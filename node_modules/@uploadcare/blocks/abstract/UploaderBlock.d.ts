export class UploaderBlock extends ActivityBlock {
    couldBeCtxOwner: boolean;
    isCtxOwner: boolean;
    init$: {
        '*commonProgress': number;
        '*uploadList': never[];
        '*focusedEntry': null;
        '*uploadMetadata': null;
        '*uploadQueue': import("@uploadcare/upload-client").Queue;
        '*uploadCollection': null;
        '*collectionErrors': any[];
        '*collectionState': import("../types").OutputCollectionState<import("../types").OutputCollectionStatus, "maybe-has-group"> | null;
        '*groupInfo': import("@uploadcare/upload-client").UploadcareGroup | null;
        '*uploadTrigger': Set<string>;
        '*currentActivity': string;
        '*currentActivityParams': {};
        '*history': never[];
        '*historyBack': null;
        '*closeModal': () => void;
    };
    /** @private */
    private __initialUploadMetadata;
    /**
     * @private
     * @type {((
     *   outputEntry: import('../types').OutputFileEntry,
     *   internalEntry?: import('./TypedData.js').TypedData,
     * ) => undefined | ReturnType<typeof import('../utils/buildOutputError.js').buildOutputFileError>)[]}
     */
    private _fileValidators;
    /**
     * @private
     * @type {((
     *   collection: TypedCollection,
     * ) =>
     *   | undefined
     *   | ReturnType<typeof import('../utils/buildOutputError.js').buildCollectionFileError>
     *   | ReturnType<typeof import('../utils/buildOutputError.js').buildCollectionFileError>[])[]}
     */
    private _collectionValidators;
    /**
     * This is Public JS API method. Could be called before block initialization, so we need to delay state interactions
     * until block init.
     *
     * TODO: If we add more public methods, it is better to use the single queue instead of tons of private fields per
     * each method. See https://github.com/uploadcare/blocks/pull/162/
     *
     * @deprecated Use `metadata` instance property on `lr-config` block instead.
     * @param {import('@uploadcare/upload-client').Metadata} metadata
     * @public
     */
    public setUploadMetadata(metadata: import('@uploadcare/upload-client').Metadata): void;
    get hasCtxOwner(): boolean;
    initCtxOwner(): void;
    /** @private */
    private _unobserveCollection;
    /** @private */
    private _unobserveCollectionProperties;
    /**
     * @param {string} url
     * @param {{ silent?: boolean; fileName?: string; source?: string }} [options]
     * @returns {import('../types').OutputFileEntry<'idle'>}
     */
    addFileFromUrl(url: string, { silent, fileName, source }?: {
        silent?: boolean | undefined;
        fileName?: string | undefined;
        source?: string | undefined;
    } | undefined): import('../types').OutputFileEntry<'idle'>;
    /**
     * @param {string} uuid
     * @param {{ silent?: boolean; fileName?: string; source?: string }} [options]
     * @returns {import('../types').OutputFileEntry<'idle'>}
     */
    addFileFromUuid(uuid: string, { silent, fileName, source }?: {
        silent?: boolean | undefined;
        fileName?: string | undefined;
        source?: string | undefined;
    } | undefined): import('../types').OutputFileEntry<'idle'>;
    /**
     * @param {string} cdnUrl
     * @param {{ silent?: boolean; fileName?: string; source?: string }} [options]
     * @returns {import('../types').OutputFileEntry<'idle'>}
     */
    addFileFromCdnUrl(cdnUrl: string, { silent, fileName, source }?: {
        silent?: boolean | undefined;
        fileName?: string | undefined;
        source?: string | undefined;
    } | undefined): import('../types').OutputFileEntry<'idle'>;
    /**
     * @param {File} file
     * @param {{ silent?: boolean; fileName?: string; source?: string; fullPath?: string }} [options]
     * @returns {import('../types').OutputFileEntry<'idle'>}
     */
    addFileFromObject(file: File, { silent, fileName, source, fullPath }?: {
        silent?: boolean | undefined;
        fileName?: string | undefined;
        source?: string | undefined;
        fullPath?: string | undefined;
    } | undefined): import('../types').OutputFileEntry<'idle'>;
    /**
     * @deprecated Will be removed in the near future. Please use `addFileFromObject`, `addFileFromUrl` or
     *   `addFileFromUuid` instead.
     * @param {File[]} files
     * @returns {import('../types').OutputFileEntry<'idle'>[]}
     */
    addFiles(files: File[]): import('../types').OutputFileEntry<'idle'>[];
    /** @param {string} internalId */
    removeFileByInternalId(internalId: string): void;
    removeAllFiles(): void;
    uploadAll: () => void;
    /** @param {{ captureCamera?: boolean }} options */
    openSystemDialog(options?: {
        captureCamera?: boolean;
    }): void;
    fileInput: HTMLInputElement | null | undefined;
    /** @type {string[]} */
    get sourceList(): string[];
    /** @param {Boolean} [force] */
    initFlow(force?: boolean | undefined): void;
    doneFlow(): void;
    /** @returns {TypedCollection} */
    get uploadCollection(): TypedCollection;
    /**
     * @private
     * @param {import('../types').OutputFileEntry} outputEntry
     */
    private _validateFileType;
    /**
     * @private
     * @param {import('../types').OutputFileEntry} outputEntry
     */
    private _validateMaxSizeLimit;
    /**
     * @private
     * @param {import('../types').OutputFileEntry} outputEntry
     * @param {import('./TypedData.js').TypedData} [internalEntry]
     */
    private _validateUploadError;
    /**
     * @private
     * @param {import('../types').OutputFileEntry} outputEntry
     */
    private _validateIsImage;
    /**
     * @private
     * @param {import('./TypedData.js').TypedData} entry
     */
    private _runFileValidatorsForEntry;
    /**
     * @private
     * @param {string[]} [entryIds]
     */
    private _runFileValidators;
    /** @private */
    private _runCollectionValidators;
    /**
     * @private
     * @param {import('../types').OutputCollectionState} collectionState
     */
    private _createGroup;
    /** @private */
    private _flushOutputItems;
    /**
     * @private
     * @type {Parameters<import('./TypedCollection.js').TypedCollection['observeCollection']>[0]}
     * @param {Set<import('./TypedData.js').TypedData>} removed
     */
    private _handleCollectionUpdate;
    /**
     * @private
     * @param {Record<keyof import('./uploadEntrySchema.js').UploadEntry, Set<string>>} changeMap
     */
    private _handleCollectionPropertiesUpdate;
    /** @private */
    private _flushCommonUploadProgress;
    /** @private */
    private setInitialCrop;
    /**
     * @param {string} entryId
     * @protected
     */
    protected getMetadataFor(entryId: string): Promise<import("@uploadcare/upload-client").Metadata>;
    /** @returns {import('@uploadcare/upload-client').FileFromOptions} */
    getUploadClientOptions(): import('@uploadcare/upload-client').FileFromOptions;
    /**
     * @template {import('../types').OutputFileStatus} TStatus
     * @param {string} entryId
     * @returns {import('../types/exported.js').OutputFileEntry<TStatus>}
     */
    getOutputItem<TStatus extends import("../types").OutputFileStatus>(entryId: string): import("../types").OutputFileEntry<TStatus>;
    /**
     * @param {(item: import('./TypedData.js').TypedData) => Boolean} [checkFn]
     * @returns {import('../types/exported.js').OutputFileEntry[]}
     */
    getOutputData(checkFn?: ((item: import('./TypedData.js').TypedData) => boolean) | undefined): import('../types/exported.js').OutputFileEntry[];
    /** @template {import('../types').OutputCollectionStatus} TStatus */
    getOutputCollectionState<TStatus_1 extends import("../types").OutputCollectionStatus>(): import("../types").OutputCollectionState<TStatus_1, "maybe-has-group">;
}
export namespace UploaderBlock {
    type extSrcList = string;
    let extSrcList: Readonly<{
        FACEBOOK: "facebook";
        DROPBOX: "dropbox";
        GDRIVE: "gdrive";
        GPHOTOS: "gphotos";
        INSTAGRAM: "instagram";
        FLICKR: "flickr";
        VK: "vk";
        EVERNOTE: "evernote";
        BOX: "box";
        ONEDRIVE: "onedrive";
        HUDDLE: "huddle";
    }>;
    type sourceTypes = string;
    let sourceTypes: Readonly<{
        FACEBOOK: "facebook";
        DROPBOX: "dropbox";
        GDRIVE: "gdrive";
        GPHOTOS: "gphotos";
        INSTAGRAM: "instagram";
        FLICKR: "flickr";
        VK: "vk";
        EVERNOTE: "evernote";
        BOX: "box";
        ONEDRIVE: "onedrive";
        HUDDLE: "huddle";
        LOCAL: "local";
        URL: "url";
        CAMERA: "camera";
        DRAW: "draw";
    }>;
}
import { ActivityBlock } from './ActivityBlock.js';
import { TypedCollection } from './TypedCollection.js';
//# sourceMappingURL=UploaderBlock.d.ts.map