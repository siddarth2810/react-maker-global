{
  "version": 3,
  "sources": ["../../@uploadcare/rest-client/dist/esm/index.browser.mjs"],
  "sourcesContent": ["var AddonExecutionStatus;\n(function (AddonExecutionStatus) {\n    AddonExecutionStatus[\"IN_PROGRESS\"] = \"in_progress\";\n    AddonExecutionStatus[\"ERROR\"] = \"error\";\n    AddonExecutionStatus[\"DONE\"] = \"done\";\n    AddonExecutionStatus[\"UNKNOWN\"] = \"unknown\";\n})(AddonExecutionStatus || (AddonExecutionStatus = {}));\n\nvar AddonName;\n(function (AddonName) {\n    AddonName[\"UC_CLAMAV_VIRUS_SCAN\"] = \"uc_clamav_virus_scan\";\n    AddonName[\"AWS_REKOGNITION_DETECT_LABELS\"] = \"aws_rekognition_detect_labels\";\n    AddonName[\"AWS_REKOGNITION_DETECT_MODERATION_LABELS\"] = \"aws_rekognition_detect_moderation_labels\";\n    AddonName[\"REMOVE_BG\"] = \"remove_bg\";\n})(AddonName || (AddonName = {}));\n\nvar BatchResponseStatus;\n(function (BatchResponseStatus) {\n    BatchResponseStatus[\"OK\"] = \"ok\";\n})(BatchResponseStatus || (BatchResponseStatus = {}));\n\nvar ConversionStatus;\n(function (ConversionStatus) {\n    ConversionStatus[\"PENDING\"] = \"pending\";\n    ConversionStatus[\"PROCESSING\"] = \"processing\";\n    ConversionStatus[\"FINISHED\"] = \"finished\";\n    ConversionStatus[\"FAILED\"] = \"failed\";\n    ConversionStatus[\"CANCELLED\"] = \"cancelled\";\n})(ConversionStatus || (ConversionStatus = {}));\n\nvar WebhookEvent;\n(function (WebhookEvent) {\n    WebhookEvent[\"FILE_UPLOADED\"] = \"file.uploaded\";\n})(WebhookEvent || (WebhookEvent = {}));\n\nfunction isObject(o) {\n    return Object.prototype.toString.call(o) === '[object Object]';\n}\n\nconst SEPARATOR = /\\W|_/g;\nfunction camelizeString(text) {\n    return text\n        .split(SEPARATOR)\n        .map((word, index) => word.charAt(0)[index > 0 ? 'toUpperCase' : 'toLowerCase']() +\n        word.slice(1))\n        .join('');\n}\nfunction camelizeArrayItems(array, { ignoreKeys } = { ignoreKeys: [] }) {\n    if (!Array.isArray(array)) {\n        return array;\n    }\n    return array.map((item) => camelizeKeys(item, { ignoreKeys }));\n}\nfunction camelizeKeys(source, { ignoreKeys } = { ignoreKeys: [] }) {\n    if (Array.isArray(source)) {\n        return camelizeArrayItems(source, { ignoreKeys });\n    }\n    if (!isObject(source)) {\n        return source;\n    }\n    const result = {};\n    for (const key of Object.keys(source)) {\n        let value = source[key];\n        if (ignoreKeys.includes(key)) {\n            result[key] = value;\n            continue;\n        }\n        if (isObject(value)) {\n            value = camelizeKeys(value, { ignoreKeys });\n        }\n        else if (Array.isArray(value)) {\n            value = camelizeArrayItems(value, { ignoreKeys });\n        }\n        result[camelizeString(key)] = value;\n    }\n    return result;\n}\n\n/**\n * SetTimeout as Promise.\n *\n * @param {number} ms Timeout in milliseconds.\n */\nconst delay = (ms) => new Promise((resolve) => setTimeout(resolve, ms));\n\nfunction getUserAgent$1({ libraryName, libraryVersion, userAgent, publicKey = '', integration = '' }) {\n    const languageName = 'JavaScript';\n    if (typeof userAgent === 'string') {\n        return userAgent;\n    }\n    if (typeof userAgent === 'function') {\n        return userAgent({\n            publicKey,\n            libraryName,\n            libraryVersion,\n            languageName,\n            integration\n        });\n    }\n    const mainInfo = [libraryName, libraryVersion, publicKey]\n        .filter(Boolean)\n        .join('/');\n    const additionInfo = [languageName, integration].filter(Boolean).join('; ');\n    return `${mainInfo} (${additionInfo})`;\n}\n\nconst isNode = () => {\n    try {\n        return Object.prototype.toString.call(global.process) === '[object process]';\n    }\n    catch (e) {\n        return false;\n    }\n};\n\nconst defaultOptions = {\n    factor: 2,\n    time: 100\n};\nfunction retrier(fn, options = defaultOptions) {\n    let attempts = 0;\n    function runAttempt(fn) {\n        const defaultDelayTime = Math.round(options.time * options.factor ** attempts);\n        const retry = (ms) => delay(ms ?? defaultDelayTime).then(() => {\n            attempts += 1;\n            return runAttempt(fn);\n        });\n        return fn({\n            attempt: attempts,\n            retry\n        });\n    }\n    return runAttempt(fn);\n}\n\nclass UploadcareError extends Error {\n}\n\nconst onCancel = (signal, callback) => {\n    if (signal) {\n        if (signal.aborted) {\n            Promise.resolve().then(callback);\n        }\n        else {\n            signal.addEventListener('abort', () => callback(), { once: true });\n        }\n    }\n};\n\nclass CancelError extends UploadcareError {\n    isCancel = true;\n    constructor(message = 'Request canceled') {\n        super(message);\n        this.name = 'CancelError';\n        Object.setPrototypeOf(this, CancelError.prototype);\n    }\n}\n\nconst DEFAULT_INTERVAL = 500;\nconst poll = ({ check, interval = DEFAULT_INTERVAL, timeout, signal }) => new Promise((resolve, reject) => {\n    let tickTimeoutId;\n    let timeoutId;\n    onCancel(signal, () => {\n        tickTimeoutId && clearTimeout(tickTimeoutId);\n        reject(new CancelError('Poll cancelled'));\n    });\n    if (timeout) {\n        timeoutId = setTimeout(() => {\n            tickTimeoutId && clearTimeout(tickTimeoutId);\n            reject(new CancelError('Timed out'));\n        }, timeout);\n    }\n    const tick = () => {\n        try {\n            Promise.resolve(check(signal))\n                .then((result) => {\n                if (result) {\n                    timeoutId && clearTimeout(timeoutId);\n                    resolve(result);\n                }\n                else {\n                    tickTimeoutId = setTimeout(tick, interval);\n                }\n            })\n                .catch((error) => {\n                timeoutId && clearTimeout(timeoutId);\n                reject(error);\n            });\n        }\n        catch (error) {\n            timeoutId && clearTimeout(timeoutId);\n            reject(error);\n        }\n    };\n    tickTimeoutId = setTimeout(tick, 0);\n});\n\nvar ConversionType;\n(function (ConversionType) {\n    ConversionType[\"VIDEO\"] = \"video\";\n    ConversionType[\"DOCUMENT\"] = \"document\";\n})(ConversionType || (ConversionType = {}));\n\nconst DEFAULT_MESSAGE = 'Unknown error';\n/**\n * TODO: it's better to split errors into something like Runtime error and\n * ServerError (RestApiError)\n */\nclass RestClientError extends UploadcareError {\n    status;\n    statusText;\n    request;\n    response;\n    constructor(message, options = {}) {\n        super();\n        this.name = 'RestClientError';\n        this.request = options.request;\n        this.response = options.response;\n        this.status = options.response?.status;\n        this.statusText = options.response?.statusText;\n        const msg = message ?? this.statusText ?? DEFAULT_MESSAGE;\n        const status = this.status || this.statusText\n            ? `[${[this.status, msg === this.statusText ? '' : this.statusText]\n                .filter(Boolean)\n                .join(' ')}] `\n            : '';\n        this.message = status + msg;\n        Object.setPrototypeOf(this, RestClientError.prototype);\n    }\n}\n\nfunction constructPageOptions(pageUrl, options) {\n    const url = new URL(pageUrl);\n    const searchParams = Object.fromEntries(url.searchParams);\n    const pageOptions = {\n        ...options,\n        ...searchParams\n    };\n    return pageOptions;\n}\nclass Paginator {\n    _paginatable;\n    _options;\n    _settings;\n    _page = null;\n    constructor(paginatable, options, settings) {\n        this._paginatable = paginatable;\n        this._options = options;\n        this._settings = settings;\n    }\n    updateOptions(options) {\n        this._options = {\n            ...this._options,\n            ...options\n        };\n        this._page = null;\n    }\n    hasNextPage() {\n        return !this._page || !!this._page.next;\n    }\n    hasPrevPage() {\n        return !!this._page && !!this._page.previous;\n    }\n    getCurrentPage() {\n        return this._page;\n    }\n    async next() {\n        if (!this._page) {\n            this._page = await this._paginatable(this._options, this._settings);\n            return this._page;\n        }\n        if (!this._page.next) {\n            return null;\n        }\n        const pageOptions = constructPageOptions(this._page.next, this._options);\n        this._page = await this._paginatable(pageOptions, this._settings);\n        return this._page;\n    }\n    async prev() {\n        if (!this._page || !this._page.previous) {\n            return null;\n        }\n        const pageOptions = constructPageOptions(this._page.previous, this._options);\n        this._page = await this._paginatable(pageOptions, this._settings);\n        return this._page;\n    }\n    generator() {\n        return paginate(this._paginatable)(this._options, this._settings);\n    }\n}\nfunction paginate(paginatable) {\n    return async function* (options, settings) {\n        let page = await paginatable(options, settings);\n        yield page;\n        while (page.next) {\n            const pageOptions = constructPageOptions(page.next, options);\n            page = await paginatable(pageOptions, settings);\n            yield page;\n        }\n    };\n}\n\nconst fetch = window.fetch;\nconst Headers = window.Headers;\nconst Request = window.Request;\n\nconst defaultSettings = {\n    apiBaseURL: 'https://api.uploadcare.com/',\n    retryThrottledRequestMaxTimes: 5,\n    retryNetworkErrorMaxTimes: 3\n};\nconst applyDefaultSettings = (userSettings) => {\n    const settings = {\n        ...defaultSettings,\n        ...userSettings\n    };\n    return settings;\n};\n\nvar version = '6.14.1';\n\nconst LIBRARY_NAME = 'UploadcareRestClient';\nconst LIBRARY_VERSION = version;\nfunction getUserAgent(options) {\n    return getUserAgent$1({\n        libraryName: LIBRARY_NAME,\n        libraryVersion: LIBRARY_VERSION,\n        ...options\n    });\n}\n\nconst THROTTLED_STATUS = 429;\nconst DEFAULT_RETRY_AFTER_TIMEOUT = 15000;\nconst DEFAULT_NETWORK_ERROR_TIMEOUT = 1000;\nfunction getTimeoutFromThrottledRequest(response) {\n    const { headers } = response;\n    if (!headers || !headers.get('retry-after')) {\n        return DEFAULT_RETRY_AFTER_TIMEOUT;\n    }\n    const seconds = parseInt(headers.get('retry-after'), 10);\n    if (!Number.isFinite(seconds)) {\n        return DEFAULT_RETRY_AFTER_TIMEOUT;\n    }\n    return seconds * 1000;\n}\nfunction retryIfFailed(fn, options) {\n    return retrier(({ attempt, retry }) => fn()\n        .then(async (response) => {\n        if (response.status !== THROTTLED_STATUS) {\n            return response;\n        }\n        if (attempt < options.retryThrottledRequestMaxTimes) {\n            return retry(getTimeoutFromThrottledRequest(response));\n        }\n        const json = await response.json();\n        const { detail } = json;\n        throw new RestClientError(detail, { response });\n    })\n        .catch((error) => {\n        if (attempt < options.retryNetworkErrorMaxTimes) {\n            return retry((attempt + 1) * DEFAULT_NETWORK_ERROR_TIMEOUT);\n        }\n        throw error;\n    }));\n}\n\nfunction normalizeQuery(input) {\n    const output = {};\n    for (const [key, value] of Object.entries(input)) {\n        if (value === undefined || value === null) {\n            continue;\n        }\n        if (value instanceof Date) {\n            output[key] = value.toISOString();\n        }\n        else {\n            output[key] = value.toString();\n        }\n    }\n    return output;\n}\nfunction getRequestURL(path, query, apiBaseURL) {\n    const url = new URL(apiBaseURL);\n    const searchParams = new URLSearchParams(query && normalizeQuery(query));\n    url.pathname = path;\n    url.search = searchParams.toString();\n    return url.toString();\n}\nasync function makeApiRequest(options, userSettings) {\n    const { method, path, query, body } = options;\n    const settings = applyDefaultSettings(userSettings);\n    if (!settings.authSchema) {\n        throw new RestClientError('authSchema is required');\n    }\n    const url = getRequestURL(path, query, settings.apiBaseURL);\n    const requestBody = body && JSON.stringify(body);\n    const unsignedRequest = new Request(url, {\n        method: method,\n        body: requestBody,\n        headers: new Headers({\n            'Content-Type': 'application/json',\n            'User-Agent': getUserAgent({\n                publicKey: settings.authSchema.publicKey,\n                integration: settings.integration,\n                userAgent: settings.userAgent\n            })\n        })\n    });\n    const requestHeaders = await settings.authSchema.getHeaders(unsignedRequest);\n    const signedRequest = new Request(url, {\n        method: method,\n        body: requestBody,\n        headers: requestHeaders\n    });\n    const response = await retryIfFailed(() => fetch(signedRequest), {\n        retryThrottledRequestMaxTimes: settings.retryThrottledRequestMaxTimes,\n        retryNetworkErrorMaxTimes: settings.retryNetworkErrorMaxTimes\n    });\n    return {\n        request: signedRequest,\n        response\n    };\n}\n\nconst DEFAULT_API_VERSION = '0.7';\nconst getAcceptHeader = () => {\n    return `application/vnd.uploadcare-v${DEFAULT_API_VERSION}+json`;\n};\n\nconst CAMELIZE_IGNORE_KEYS = ['metadata', 'problems', 'appdata'];\nconst NO_CONTENT_STATUS = 204;\nconst isJsonContentType = (type) => type && ['application/json', getAcceptHeader()].includes(type);\nasync function handleApiRequest(options) {\n    const { apiRequest, okCodes, camelize = true } = options;\n    const { request, response } = apiRequest;\n    if (response.status === NO_CONTENT_STATUS) {\n        return undefined;\n    }\n    if (!isJsonContentType(response.headers.get('content-type'))) {\n        throw new RestClientError(undefined, {\n            response,\n            request\n        });\n    }\n    const json = await response.json();\n    if (!okCodes.includes(response.status)) {\n        throw new RestClientError(json.detail, {\n            response,\n            request\n        });\n    }\n    if (!camelize) {\n        return json;\n    }\n    return camelizeKeys(json, {\n        ignoreKeys: CAMELIZE_IGNORE_KEYS\n    });\n}\n\nasync function addonExecutionStatus(options, userSettings) {\n    const apiRequest = await makeApiRequest({\n        method: 'GET',\n        path: `/addons/${options.addonName}/execute/status/`,\n        query: {\n            request_id: options.requestId\n        }\n    }, userSettings);\n    return handleApiRequest({ apiRequest, okCodes: [200] });\n}\n\nasync function executeAddon(options, userSettings) {\n    const apiRequest = await makeApiRequest({\n        method: 'POST',\n        path: `/addons/${options.addonName}/execute/`,\n        body: {\n            target: options.target,\n            params: options.params\n        }\n    }, userSettings);\n    return handleApiRequest({ apiRequest, okCodes: [200] });\n}\n\nasync function fileInfo(options, userSettings) {\n    const apiRequest = await makeApiRequest({\n        method: 'GET',\n        path: `/files/${options.uuid}/`,\n        query: {\n            include: options.include\n        }\n    }, userSettings);\n    return handleApiRequest({ apiRequest, okCodes: [200] });\n}\n\nvar PollStrategyJobStatus;\n(function (PollStrategyJobStatus) {\n    PollStrategyJobStatus[PollStrategyJobStatus[\"FINISHED\"] = 0] = \"FINISHED\";\n    PollStrategyJobStatus[PollStrategyJobStatus[\"FAILED\"] = 1] = \"FAILED\";\n})(PollStrategyJobStatus || (PollStrategyJobStatus = {}));\nfunction createPollStrategy({ getJobStatus, job, isJobFailed, isJobFinished }) {\n    return async () => {\n        const statusResponse = await getJobStatus(job);\n        if (isJobFinished(statusResponse)) {\n            return { status: PollStrategyJobStatus.FINISHED, statusResponse };\n        }\n        else if (isJobFailed(statusResponse)) {\n            return { status: PollStrategyJobStatus.FAILED, statusResponse };\n        }\n        return false;\n    };\n}\nfunction createJobPoller(options) {\n    const { runner, resolveJobs, getJobStatus, isJobFinished, isJobFailed, getResult, getError } = options;\n    return async (options, runnerSettings) => {\n        // TODO: add default timeout and inerval\n        const { pollOptions, ...runnerOptions } = options;\n        const response = await runner(runnerOptions, runnerSettings);\n        const jobs = resolveJobs(response, runnerOptions, runnerSettings);\n        if (pollOptions?.signal?.aborted) {\n            throw new CancelError();\n        }\n        const promises = jobs.map(async (job) => {\n            const pollStrategy = createPollStrategy({\n                getJobStatus,\n                job,\n                isJobFailed,\n                isJobFinished\n            });\n            const pollResult = await poll({\n                check: pollStrategy,\n                signal: pollOptions?.signal,\n                interval: pollOptions?.interval,\n                timeout: pollOptions?.timeout\n            });\n            if (pollResult.status === PollStrategyJobStatus.FINISHED) {\n                const result = await getResult(job, pollResult.statusResponse);\n                return result;\n            }\n            const error = await getError(job, pollResult.statusResponse);\n            return error;\n        });\n        return promises;\n    };\n}\n\nconst addonJobPoller = async (options, settings) => {\n    const { onRun, onStatus, ...pollerOptions } = options;\n    const poller = createJobPoller({\n        runner: executeAddon,\n        resolveJobs: (response, runnerOptions, runnerSettings) => {\n            onRun && onRun(response);\n            return [\n                {\n                    target: runnerOptions.target,\n                    requestId: response.requestId,\n                    addonName: runnerOptions.addonName,\n                    runnerSettings\n                }\n            ];\n        },\n        getJobStatus: async (job) => {\n            const response = await addonExecutionStatus({\n                addonName: job.addonName,\n                requestId: job.requestId\n            }, job.runnerSettings);\n            onStatus && onStatus(response);\n            return response;\n        },\n        isJobFinished: (statusResponse) => statusResponse.status === AddonExecutionStatus.DONE,\n        // TODO: handle unknown status\n        isJobFailed: (statusResponse) => statusResponse.status === AddonExecutionStatus.ERROR,\n        getResult: async (job) => {\n            const info = await fileInfo({ uuid: job.target, include: 'appdata' }, job.runnerSettings);\n            const appdata = info.appdata;\n            const addonData = appdata[job.addonName];\n            return {\n                error: false,\n                result: addonData\n            };\n        },\n        getError: async () => ({\n            error: true,\n            result: null\n        })\n    });\n    const promises = await poller(pollerOptions, settings);\n    return promises[0];\n};\n\nasync function conversionJobStatus(options, userSettings) {\n    const apiRequest = await makeApiRequest({\n        method: 'GET',\n        path: `/convert/${options.type}/status/${options.token}/`\n    }, userSettings);\n    return handleApiRequest({ apiRequest, okCodes: [200] });\n}\n\nconst storeValueToString = (store) => {\n    if (typeof store === 'boolean') {\n        return store ? 'true' : 'false';\n    }\n    if (!store || store === 'auto') {\n        return undefined;\n    }\n    throw new RestClientError('Invalid `store` option value. Expected `true`, `false` our `\"auto\"`');\n};\n\nasync function convert(options, userSettings) {\n    const isDocument = options.type === ConversionType.DOCUMENT;\n    const body = {\n        paths: options.paths,\n        store: storeValueToString(options.store)\n    };\n    if (isDocument) {\n        body['save_in_group'] = options?.saveInGroup?.toString();\n    }\n    const apiRequest = await makeApiRequest({\n        method: 'POST',\n        path: `/convert/${options.type}/`,\n        body\n    }, userSettings);\n    return handleApiRequest({ apiRequest, okCodes: [200] });\n}\n\nconst conversionJobPoller = (options, settings) => {\n    const { onRun, onStatus, ...rest } = options;\n    const pollerOptions = rest;\n    const poller = createJobPoller({\n        runner: (convert),\n        resolveJobs: (response, runnerOptions, runnerSettings) => {\n            onRun && onRun(response);\n            return runnerOptions.paths.map((path) => {\n                const problem = response.problems[path];\n                if (problem) {\n                    return {\n                        hasProblem: true,\n                        type: runnerOptions.type,\n                        path,\n                        problem,\n                        runnerSettings\n                    };\n                }\n                const result = response.result.find((r) => r.originalSource === path);\n                return {\n                    hasProblem: false,\n                    type: runnerOptions.type,\n                    path,\n                    token: result.token,\n                    result,\n                    runnerSettings\n                };\n            });\n        },\n        getJobStatus: async (job) => {\n            let status;\n            if (job.hasProblem) {\n                status = {\n                    path: job.path,\n                    status: ConversionStatus.FAILED,\n                    error: job.problem,\n                    result: null\n                };\n            }\n            else {\n                const statusResponse = await conversionJobStatus({ type: job.type, token: job.token }, job.runnerSettings);\n                status = {\n                    path: job.path,\n                    ...statusResponse\n                };\n            }\n            onStatus && onStatus(status);\n            return status;\n        },\n        isJobFinished: (statusResponse) => statusResponse.status === ConversionStatus.FINISHED,\n        isJobFailed: (statusResponse) => statusResponse.status === ConversionStatus.FAILED ||\n            statusResponse.status === ConversionStatus.CANCELLED,\n        getResult: async (job, statusResponse) => statusResponse,\n        getError: async (job, statusResponse) => statusResponse\n    });\n    return poller(pollerOptions, settings);\n};\n\nconst createSignature = (...args) => {\n    return import('./createSignature.browser.b4bcb7f3.mjs').then((m) => m.createSignature(...args));\n};\n\nfunction hasSignatureResolver(options) {\n    return !!options\n        .signatureResolver;\n}\nfunction hasSecretKey(options) {\n    return !!options.secretKey;\n}\nclass UploadcareAuthSchema {\n    _publicKey;\n    _signatureResolver;\n    _md5Loader;\n    constructor(options) {\n        if (hasSecretKey(options)) {\n            if (!isNode()) {\n                console.warn(`Seems that you're using the secret key on the client-side. We're hope you know what you're doing.`);\n            }\n            this._signatureResolver = (signString) => createSignature(options.secretKey, signString);\n        }\n        else if (hasSignatureResolver(options)) {\n            this._signatureResolver = options.signatureResolver;\n        }\n        else {\n            throw new RestClientError(`Please, provide either 'secretKey' or 'signatureResolver'`);\n        }\n        const { publicKey, md5Loader } = options;\n        this._publicKey = publicKey;\n        if (md5Loader) {\n            this._md5Loader = md5Loader();\n        }\n        else {\n            this._md5Loader = import('./md5.browser.c389165d.mjs').then((m) => m.md5);\n        }\n    }\n    async md5(input) {\n        const md5 = await this._md5Loader;\n        return md5(input);\n    }\n    getSignString(params) {\n        return [\n            params.method,\n            params.contentHash,\n            params.contentType,\n            params.date,\n            params.uri\n        ].join('\\n');\n    }\n    get publicKey() {\n        return this._publicKey;\n    }\n    async getHeaders(request) {\n        const body = await request.text();\n        const contentHash = await this.md5(body || '');\n        const date = new Date().toUTCString();\n        const url = new URL(request.url);\n        const uri = url.pathname + url.search + url.hash;\n        const signString = this.getSignString({\n            contentType: request.headers.get('Content-Type') || '',\n            method: request.method,\n            contentHash,\n            date,\n            uri\n        });\n        const signature = await this._signatureResolver(signString);\n        const headers = new Headers({\n            ...Object.fromEntries(request.headers.entries()),\n            'X-Uploadcare-Date': date,\n            Accept: getAcceptHeader(),\n            Authorization: `Uploadcare ${this._publicKey}:${signature}`\n        });\n        return headers;\n    }\n}\n\nclass UploadcareSimpleAuthSchema {\n    _publicKey;\n    _secretKey;\n    constructor({ publicKey, secretKey }) {\n        this._publicKey = publicKey;\n        this._secretKey = secretKey;\n        if (secretKey && !isNode()) {\n            console.warn(`Seems that you're using the secret key on the client-side. We're hope you know that you're doing.`);\n        }\n    }\n    get publicKey() {\n        return this._publicKey;\n    }\n    async getHeaders(request) {\n        return new Headers({\n            ...Object.fromEntries(request.headers.entries()),\n            Accept: getAcceptHeader(),\n            Authorization: `Uploadcare.Simple ${this._publicKey}:${this._secretKey}`\n        });\n    }\n}\n\nasync function copyFileToLocalStorage(options, userSettings) {\n    const apiRequest = await makeApiRequest({\n        method: 'POST',\n        path: `/files/local_copy/`,\n        body: {\n            source: options.source,\n            store: options.store,\n            metadata: options.metadata\n        }\n    }, userSettings);\n    return handleApiRequest({ apiRequest, okCodes: [201] });\n}\n\nasync function copyFileToRemoteStorage(options, userSettings) {\n    const apiRequest = await makeApiRequest({\n        method: 'POST',\n        path: `/files/remote_copy/`,\n        body: {\n            source: options.source,\n            target: options.target,\n            make_public: options.makePublic,\n            pattern: options.pattern\n        }\n    }, userSettings);\n    return handleApiRequest({ apiRequest, okCodes: [200, 201] });\n}\n\nasync function deleteFile(options, userSettings) {\n    const apiRequest = await makeApiRequest({\n        method: 'DELETE',\n        path: `/files/${options.uuid}/storage/`\n    }, userSettings);\n    return handleApiRequest({ apiRequest, okCodes: [200] });\n}\n\nasync function deleteFiles(options, userSettings) {\n    const apiRequest = await makeApiRequest({\n        method: 'DELETE',\n        path: `/files/storage/`,\n        body: options.uuids\n    }, userSettings);\n    return handleApiRequest({ apiRequest, okCodes: [200] });\n}\n\nasync function listOfFiles(options, userSettings) {\n    const apiRequest = await makeApiRequest({\n        method: 'GET',\n        path: '/files/',\n        query: {\n            from: options.from,\n            removed: options.removed,\n            stored: options.stored,\n            limit: options.limit,\n            ordering: options.ordering\n        }\n    }, userSettings);\n    return handleApiRequest({ apiRequest, okCodes: [200] });\n}\n\nasync function storeFile(options, userSettings) {\n    const apiRequest = await makeApiRequest({\n        method: 'PUT',\n        path: `/files/${options.uuid}/storage/`\n    }, userSettings);\n    return handleApiRequest({ apiRequest, okCodes: [200] });\n}\n\nasync function storeFiles(options, userSettings) {\n    const apiRequest = await makeApiRequest({\n        method: 'PUT',\n        path: `/files/storage/`,\n        body: options.uuids\n    }, userSettings);\n    return handleApiRequest({ apiRequest, okCodes: [200] });\n}\n\nasync function deleteGroup(options, userSettings) {\n    const apiRequest = await makeApiRequest({\n        method: 'DELETE',\n        path: `/groups/${options.uuid}/`\n    }, userSettings);\n    return handleApiRequest({ apiRequest, okCodes: [204] });\n}\n\nasync function groupInfo(options, userSettings) {\n    const apiRequest = await makeApiRequest({\n        method: 'GET',\n        path: `/groups/${options.uuid}/`\n    }, userSettings);\n    return handleApiRequest({ apiRequest, okCodes: [200] });\n}\n\nasync function listOfGroups(options, userSettings) {\n    const apiRequest = await makeApiRequest({\n        method: 'GET',\n        path: '/groups/',\n        query: {\n            from: options.from,\n            limit: options.limit,\n            ordering: options.ordering\n        }\n    }, userSettings);\n    return handleApiRequest({ apiRequest, okCodes: [200] });\n}\n\nasync function deleteMetadata(options, userSettings) {\n    const apiRequest = await makeApiRequest({\n        method: 'DELETE',\n        path: `/files/${options.uuid}/metadata/${options.key}/`\n    }, userSettings);\n    return handleApiRequest({ apiRequest, okCodes: [204] });\n}\n\nasync function getMetadata(options, userSettings) {\n    const apiRequest = await makeApiRequest({\n        method: 'GET',\n        path: `/files/${options.uuid}/metadata/`\n    }, userSettings);\n    return handleApiRequest({ apiRequest, okCodes: [200], camelize: false });\n}\n\nasync function getMetadataValue(options, userSettings) {\n    const apiRequest = await makeApiRequest({\n        method: 'GET',\n        path: `/files/${options.uuid}/metadata/${options.key}/`\n    }, userSettings);\n    return handleApiRequest({ apiRequest, okCodes: [200] });\n}\n\nasync function updateMetadata(options, userSettings) {\n    const apiRequest = await makeApiRequest({\n        method: 'PUT',\n        path: `/files/${options.uuid}/metadata/${options.key}/`,\n        body: options.value\n    }, userSettings);\n    return handleApiRequest({ apiRequest, okCodes: [200, 201] });\n}\n\nasync function createWebhook(options, userSettings) {\n    const apiRequest = await makeApiRequest({\n        method: 'POST',\n        path: `/webhooks/`,\n        body: {\n            target_url: options.targetUrl,\n            event: options.event,\n            is_active: options.isActive,\n            signing_secret: options.signingSecret\n        }\n    }, userSettings);\n    return handleApiRequest({ apiRequest, okCodes: [201] });\n}\n\nasync function deleteWebhook(options, userSettings) {\n    const apiRequest = await makeApiRequest({\n        method: 'DELETE',\n        path: `/webhooks/unsubscribe/`,\n        body: {\n            target_url: options.targetUrl\n        }\n    }, userSettings);\n    return handleApiRequest({ apiRequest, okCodes: [204] });\n}\n\nasync function listOfWebhooks(options, userSettings) {\n    const apiRequest = await makeApiRequest({\n        method: 'GET',\n        path: `/webhooks/`\n    }, userSettings);\n    return handleApiRequest({ apiRequest, okCodes: [200] });\n}\n\nasync function updateWebhook(options, userSettings) {\n    const apiRequest = await makeApiRequest({\n        method: 'PUT',\n        path: `/webhooks/${options.id}/`,\n        body: {\n            target_url: options.targetUrl,\n            event: options.event,\n            is_active: options.isActive,\n            signing_secret: options.signingSecret\n        }\n    }, userSettings);\n    return handleApiRequest({ apiRequest, okCodes: [200] });\n}\n\nasync function conversionInfo(options, userSettings) {\n    const apiRequest = await makeApiRequest({\n        method: 'GET',\n        path: `/convert/document/${options.uuid}/`\n    }, userSettings);\n    return handleApiRequest({ apiRequest, okCodes: [200] });\n}\n\nexport { AddonExecutionStatus, AddonName, BatchResponseStatus, CancelError, ConversionStatus, ConversionType, Paginator, RestClientError, UploadcareAuthSchema, UploadcareError, UploadcareSimpleAuthSchema, WebhookEvent, addonExecutionStatus, addonJobPoller, conversionInfo, conversionJobPoller, conversionJobStatus, convert, copyFileToLocalStorage, copyFileToRemoteStorage, createSignature, createWebhook, deleteFile, deleteFiles, deleteGroup, deleteMetadata, deleteWebhook, executeAddon, fileInfo, getMetadata, getMetadataValue, getUserAgent$1 as getUserAgent, groupInfo, listOfFiles, listOfGroups, listOfWebhooks, paginate, storeFile, storeFiles, updateMetadata, updateWebhook };\n"],
  "mappings": "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",
  "names": ["AddonExecutionStatus", "AddonName", "BatchResponseStatus", "ConversionStatus", "WebhookEvent", "fn", "ConversionType", "PollStrategyJobStatus", "options"]
}
